{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MK\\\\Pictures\\\\YouTube Videos\\\\devmtn\\\\chameleon\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport chameleon_icon from \"./images/chameleon.svg\";\nimport styles from './component-styles/App.scss';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.drawToCanvas = async e => {\n      //On change of 'input' value, create a new image element\n      var image = new Image(); //Set src = to input's value\n\n      image.src = e.target.value;\n      await image.onload;\n      this.state.canvas.drawImage(picture, 0, 0, picture.width, picture.height, 0, 0, canvas.width, canvas.height);\n    };\n\n    this.colorOfPixel = () => {\n      // getting user coordinates\n      this.setState({\n        x: e.nativeEvent.offsetX,\n        y: e.nativeEvent.offsetY\n      }); //Destructering \n\n      const _this$state = this.state,\n            canvas = _this$state.canvas,\n            x = _this$state.x,\n            y = _this$state.y; // getting image data and RGB values\n\n      var img_data = canvas.getImageData(x, y, 1, 1).data;\n      var R = img_data[0];\n      var G = img_data[1];\n      var B = img_data[2];\n      document.getElementById(\"rgb\").value = R + ',' + G + ',' + B; //Convert RGB values to Hex code\n\n      function rgbToHex(R, G, B) {\n        return toHex(R) + toHex(G) + toHex(B);\n      }\n\n      function toHex(n) {\n        n = parseInt(n, 10);\n        if (isNaN(n)) return \"00\";\n        n = Math.max(0, Math.min(n, 255));\n        return \"0123456789ABCDEF\".charAt((n - n % 16) / 16) + \"0123456789ABCDEF\".charAt(n % 16);\n      }\n\n      var hex = rgbToHex(R, G, B);\n      document.getElementById(\"hex\").value = \"#\" + hex;\n      document.getElementById(\"color-display\").style.backgroundColor = \"#\" + hex;\n    };\n\n    this.state = {\n      canvas: null,\n      x: 0,\n      y: 0\n    };\n  }\n\n  componentDidMount() {\n    //on mounting of component, create a variable = to DOM's canvas element\n    var canvas = document.getElementById('canvas').getContext('2d'); //update state\n\n    this.setState({\n      canvas\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"app_wrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: chameleon_icon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"canvas_wrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"canvas\",\n      onClick: e => this.getColor(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      onChange: e => this.drawToCanvas(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/MK/Pictures/YouTube Videos/devmtn/chameleon/src/App.js"],"names":["React","Component","styles","App","constructor","props","drawToCanvas","e","image","Image","src","target","value","onload","state","canvas","drawImage","picture","width","height","colorOfPixel","setState","x","nativeEvent","offsetX","y","offsetY","img_data","getImageData","data","R","G","B","document","getElementById","rgbToHex","toHex","n","parseInt","isNaN","Math","max","min","charAt","hex","style","backgroundColor","componentDidMount","getContext","render","chameleon_icon","getColor"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;AAEA,OAAOC,MAAP,MAAmB,6BAAnB;;AAEA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AACxBG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAiBvBC,YAjBuB,GAiBR,MAAOC,CAAP,IAAa;AACxB;AACA,UAAIC,KAAK,GAAG,IAAIC,KAAJ,EAAZ,CAFwB,CAGxB;;AACAD,MAAAA,KAAK,CAACE,GAAN,GAAYH,CAAC,CAACI,MAAF,CAASC,KAArB;AAEA,YAAMJ,KAAK,CAACK,MAAZ;AAEA,WAAKC,KAAL,CAAWC,MAAX,CAAkBC,SAAlB,CAA4BC,OAA5B,EAAqC,CAArC,EAAwC,CAAxC,EAA2CA,OAAO,CAACC,KAAnD,EAA0DD,OAAO,CAACE,MAAlE,EAA0E,CAA1E,EAA6E,CAA7E,EAAgFJ,MAAM,CAACG,KAAvF,EAA8FH,MAAM,CAACI,MAArG;AACH,KA1BsB;;AAAA,SA8BvBC,YA9BuB,GA8BR,MAAM;AACjB;AACA,WAAKC,QAAL,CAAc;AAAEC,QAAAA,CAAC,EAAEf,CAAC,CAACgB,WAAF,CAAcC,OAAnB;AAA4BC,QAAAA,CAAC,EAAElB,CAAC,CAACgB,WAAF,CAAcG;AAA7C,OAAd,EAFiB,CAIjB;;AAJiB,0BAKM,KAAKZ,KALX;AAAA,YAKVC,MALU,eAKVA,MALU;AAAA,YAKFO,CALE,eAKFA,CALE;AAAA,YAKCG,CALD,eAKCA,CALD,EAOjB;;AACA,UAAIE,QAAQ,GAAGZ,MAAM,CAACa,YAAP,CAAoBN,CAApB,EAAuBG,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgCI,IAA/C;AACA,UAAIC,CAAC,GAAGH,QAAQ,CAAC,CAAD,CAAhB;AAAqB,UAAII,CAAC,GAAGJ,QAAQ,CAAC,CAAD,CAAhB;AAAqB,UAAIK,CAAC,GAAGL,QAAQ,CAAC,CAAD,CAAhB;AAC1CM,MAAAA,QAAQ,CAACC,cAAT,CAAwB,KAAxB,EAA+BtB,KAA/B,GAAuCkB,CAAC,GAAG,GAAJ,GAAUC,CAAV,GAAc,GAAd,GAAoBC,CAA3D,CAViB,CAYjB;;AACA,eAASG,QAAT,CAAkBL,CAAlB,EAAoBC,CAApB,EAAsBC,CAAtB,EAAyB;AAAC,eAAOI,KAAK,CAACN,CAAD,CAAL,GAASM,KAAK,CAACL,CAAD,CAAd,GAAkBK,KAAK,CAACJ,CAAD,CAA9B;AAAkC;;AAC5D,eAASI,KAAT,CAAeC,CAAf,EAAkB;AAClBA,QAAAA,CAAC,GAAGC,QAAQ,CAACD,CAAD,EAAG,EAAH,CAAZ;AACA,YAAIE,KAAK,CAACF,CAAD,CAAT,EAAc,OAAO,IAAP;AACdA,QAAAA,CAAC,GAAGG,IAAI,CAACC,GAAL,CAAS,CAAT,EAAWD,IAAI,CAACE,GAAL,CAASL,CAAT,EAAW,GAAX,CAAX,CAAJ;AACA,eAAO,mBAAmBM,MAAnB,CAA0B,CAACN,CAAC,GAACA,CAAC,GAAC,EAAL,IAAS,EAAnC,IAA0C,mBAAmBM,MAAnB,CAA0BN,CAAC,GAAC,EAA5B,CAAjD;AACH;;AACG,UAAIO,GAAG,GAAGT,QAAQ,CAACL,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAlB;AACAC,MAAAA,QAAQ,CAACC,cAAT,CAAwB,KAAxB,EAA+BtB,KAA/B,GAAuC,MAAMgC,GAA7C;AACAX,MAAAA,QAAQ,CAACC,cAAT,CAAwB,eAAxB,EAAyCW,KAAzC,CAA+CC,eAA/C,GAAiE,MAAMF,GAAvE;AACH,KArDsB;;AAGf,SAAK9B,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE,IADC;AAETO,MAAAA,CAAC,EAAE,CAFM;AAGTG,MAAAA,CAAC,EAAE;AAHM,KAAb;AAKH;;AAELsB,EAAAA,iBAAiB,GAAG;AAChB;AACA,QAAIhC,MAAM,GAAGkB,QAAQ,CAACC,cAAT,CAAwB,QAAxB,EAAkCc,UAAlC,CAA6C,IAA7C,CAAb,CAFgB,CAGhB;;AACA,SAAK3B,QAAL,CAAc;AAACN,MAAAA;AAAD,KAAd;AACH;;AAyCDkC,EAAAA,MAAM,GAAG;AACN,WACK;AAAK,MAAA,EAAE,EAAC,UAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI;AAAK,MAAA,GAAG,EAAEC,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI;AAAK,MAAA,EAAE,EAAC,aAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsB;AAAQ,MAAA,EAAE,EAAC,QAAX;AAAoB,MAAA,OAAO,EAAE3C,CAAC,IAAI,KAAK4C,QAAL,CAAc5C,CAAd,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAtB,CAHJ,EAII;AAAO,MAAA,QAAQ,EAAEA,CAAC,IAAI,KAAKD,YAAL,CAAkBC,CAAlB,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CADL;AASC;;AAnEwB;;AAsE5B,eAAeJ,GAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport chameleon_icon from './images/chameleon.svg'\r\nimport styles from './component-styles/App.scss'\r\n\r\nclass App extends Component { \r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            canvas: null,\r\n            x: 0,\r\n            y: 0\r\n        }\r\n    }\r\n\r\ncomponentDidMount() {\r\n    //on mounting of component, create a variable = to DOM's canvas element\r\n    var canvas = document.getElementById('canvas').getContext('2d');\r\n    //update state\r\n    this.setState({canvas}) \r\n}\r\n\r\ndrawToCanvas = async (e) => {\r\n    //On change of 'input' value, create a new image element\r\n    var image = new Image()\r\n    //Set src = to input's value\r\n    image.src = e.target.value;\r\n    \r\n    await image.onload;\r\n\r\n    this.state.canvas.drawImage(picture, 0, 0, picture.width, picture.height, 0, 0, canvas.width, canvas.height)\r\n}\r\n\r\n//ES6 arrow function to bind to this\r\n\r\ncolorOfPixel = () => {\r\n    // getting user coordinates\r\n    this.setState({ x: e.nativeEvent.offsetX, y: e.nativeEvent.offsetY });\r\n\r\n    //Destructering \r\n    const {canvas, x, y} = this.state;\r\n\r\n    // getting image data and RGB values\r\n    var img_data = canvas.getImageData(x, y, 1, 1).data;\r\n    var R = img_data[0]; var G = img_data[1]; var B = img_data[2];  \r\n    document.getElementById(\"rgb\").value = R + ',' + G + ',' + B;\r\n    \r\n    //Convert RGB values to Hex code\r\n    function rgbToHex(R,G,B) {return toHex(R)+toHex(G)+toHex(B)}\r\n    function toHex(n) {\r\n    n = parseInt(n,10);\r\n    if (isNaN(n)) return \"00\";\r\n    n = Math.max(0,Math.min(n,255));\r\n    return \"0123456789ABCDEF\".charAt((n-n%16)/16)  + \"0123456789ABCDEF\".charAt(n%16);\r\n}\r\n    var hex = rgbToHex(R, G, B);\r\n    document.getElementById(\"hex\").value = \"#\" + hex;\r\n    document.getElementById(\"color-display\").style.backgroundColor = \"#\" + hex;\r\n}\r\n\r\n\r\nrender() {\r\n   return(\r\n        <div id=\"app_wrap\">\r\n\r\n            <img src={chameleon_icon}/>\r\n            <div id=\"canvas_wrap\"><canvas id=\"canvas\" onClick={e => this.getColor(e)}></canvas></div>\r\n            <input onChange={e => this.drawToCanvas(e)}></input>\r\n            \r\n        </div>\r\n      )\r\n   } \r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}