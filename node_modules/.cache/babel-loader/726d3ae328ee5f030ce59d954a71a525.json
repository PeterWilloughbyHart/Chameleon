{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MK\\\\Pictures\\\\YouTube Videos\\\\devmtn\\\\chameleon\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport chameleon_icon from './images/chameleon.jpg';\nimport styles from './component-styles/App.scss';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.drawToCanvas = async e => {\n      //On change of 'input' value, create a new image element\n      var image = new Image(); //Set src = to input's value\n\n      image.alt = \"pic\";\n      image.src = e.target.value; //wait for image to load\n\n      await image.onload; //draw loaded image onto the canvas\n\n      const canvas = this.state.canvas;\n      canvas.getContext('2d').drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);\n    };\n\n    this.getColor = e => {\n      // Updating state w/ user's 'click' coordinates\n      this.setState({\n        x: e.nativeEvent.offsetX,\n        y: e.nativeEvent.offsetY\n      }); //Destructuring for simplified access \n\n      const _this$state = this.state,\n            canvas = _this$state.canvas,\n            x = _this$state.x,\n            y = _this$state.y; // getting image data and RGB values\n\n      var img_data = canvas.getContext('2d').getImageData(x, y, 1, 1).data;\n      var R = img_data[0];\n      var G = img_data[1];\n      var B = img_data[2]; //Display data to UI\n\n      document.getElementById(\"rgb\").value = \"RGB value is: \" + R + ',' + G + ',' + B; //Convert RGB values to Hex code\n\n      function rgbToHex(R, G, B) {\n        return toHex(R) + toHex(G) + toHex(B);\n      }\n\n      function toHex(n) {\n        n = parseInt(n, 10);\n        if (isNaN(n)) return \"00\";\n        n = Math.max(0, Math.min(n, 255));\n        return \"0123456789ABCDEF\".charAt((n - n % 16) / 16) + \"0123456789ABCDEF\".charAt(n % 16);\n      }\n\n      var hex = rgbToHex(R, G, B); //Display data to UI & \"Camouflage\" background\n\n      document.getElementById(\"hex\").value = \"Hex value is: \" + \"#\" + hex;\n      document.getElementById(\"app_wrap\").style.backgroundColor = \"#\" + hex;\n    };\n\n    this.state = {\n      canvas: null,\n      x: 0,\n      y: 0\n    };\n  }\n\n  componentDidMount() {\n    //on mounting of component, create a variable = to DOM's canvas element\n    var canvas = document.getElementById('canvas'); //update state\n\n    this.setState({\n      canvas\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"app_wrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: chameleon_icon,\n      alt: \"chameleon_logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"canvas_wrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"canvas\",\n      onClick: e => this.getColor(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      onChange: e => this.drawToCanvas(e),\n      placeholder: \"paste image address here:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"data_wrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"rgb\",\n      placeholder: \"rbg value:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      id: \"hex\",\n      placeholder: \"hex value:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/MK/Pictures/YouTube Videos/devmtn/chameleon/src/App.js"],"names":["React","Component","chameleon_icon","styles","App","constructor","props","drawToCanvas","e","image","Image","alt","src","target","value","onload","canvas","state","getContext","drawImage","width","height","getColor","setState","x","nativeEvent","offsetX","y","offsetY","img_data","getImageData","data","R","G","B","document","getElementById","rgbToHex","toHex","n","parseInt","isNaN","Math","max","min","charAt","hex","style","backgroundColor","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport chameleon_icon from './images/chameleon.jpg'\r\nimport styles from './component-styles/App.scss'\r\n\r\nclass App extends Component { \r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            canvas: null,\r\n            x: 0,\r\n            y: 0\r\n        }\r\n    }\r\n\r\ncomponentDidMount() {\r\n    //on mounting of component, create a variable = to DOM's canvas element\r\n    var canvas = document.getElementById('canvas');\r\n    //update state\r\n    this.setState({canvas}) \r\n}\r\n\r\ndrawToCanvas = async (e) => {\r\n    //On change of 'input' value, create a new image element\r\n    var image = new Image()\r\n    //Set src = to input's value\r\n    image.alt = \"pic\";\r\n    image.src = e.target.value;\r\n    //wait for image to load\r\n    await image.onload;\r\n    //draw loaded image onto the canvas\r\n    const {canvas} = this.state;\r\n    canvas.getContext('2d').drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height)\r\n}\r\n\r\n\r\ngetColor = (e) => {\r\n    // Updating state w/ user's 'click' coordinates\r\n    this.setState({ x: e.nativeEvent.offsetX, y: e.nativeEvent.offsetY });\r\n\r\n    //Destructuring for simplified access \r\n    const {canvas, x, y} = this.state;\r\n\r\n    // getting image data and RGB values\r\n    var img_data = canvas.getContext('2d').getImageData(x, y, 1, 1).data;\r\n    var R = img_data[0]; var G = img_data[1]; var B = img_data[2]; \r\n    \r\n    //Display data to UI\r\n    document.getElementById(\"rgb\").value = \"RGB value is: \" + R + ',' + G + ',' + B;\r\n    \r\n    //Convert RGB values to Hex code\r\n    function rgbToHex(R,G,B) {return toHex(R)+toHex(G)+toHex(B)}\r\n    function toHex(n) {\r\n    n = parseInt(n,10);\r\n    if (isNaN(n)) return \"00\";\r\n    n = Math.max(0,Math.min(n,255));\r\n    return \"0123456789ABCDEF\".charAt((n-n%16)/16)  + \"0123456789ABCDEF\".charAt(n%16);\r\n    }\r\n    var hex = rgbToHex(R, G, B);\r\n\r\n    //Display data to UI & \"Camouflage\" background\r\n    document.getElementById(\"hex\").value = \"Hex value is: \" + \"#\" + hex;\r\n    document.getElementById(\"app_wrap\").style.backgroundColor = \"#\" + hex;\r\n}\r\n\r\n\r\nrender() {\r\n   return(\r\n        <div id=\"app_wrap\">\r\n\r\n            <img src={chameleon_icon} alt=\"chameleon_logo\"/>\r\n            <div id=\"canvas_wrap\"><canvas id=\"canvas\" onClick={e => this.getColor(e)}></canvas></div>\r\n            <input onChange={e => this.drawToCanvas(e)} placeholder=\"paste image address here:\"></input>\r\n            <div id=\"data_wrap\">\r\n            <input id=\"rgb\" placeholder=\"rbg value:\"></input>\r\n            <input id=\"hex\" placeholder=\"hex value:\"></input>\r\n            </div>\r\n            \r\n        </div>\r\n      )\r\n   } \r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}